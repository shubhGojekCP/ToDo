swagger: '2.0'
consumes:
  - application/json
produces:
  - application/json
schemes:
  - http
  - https
info:
  description: "this is a REST API for managing TODOs"
  title: 'ToDo API'
  termsOfService: 'there are no TOS at this moment, use at your own risk we take no responsibility'
  contact:
    name: 'Shubham Bhawsar'
    url: 'https://github.com/'
    email: "bhawsarshubham741@gmail.com"
  license:
    name: ""
  version: "1.0"
host: localhost
basePath: /api
x-meta-value: value
x-meta-array:
  - value1
  - value2
x-meta-array-obj:
  - name: obj
    value: field
paths:
  /task:
    get:
      operationId: "getTodos"
      deprecated: false
      summary: "Lists all Todos."
      description: "This will show all available Todos by default"
      tags: []
      consumes:
      - application/json
      produces:
      - application/json
      schemes:
      - http
      - https
      responses:
        "200":
          description: "successfully obtained data"
          schema:
            $ref: "#/definitions/todosList"
    post:
      operationId: "createTask"
      deprecated: false
      summary: "Creates a Task "
      description: "Creates a Task given the name ,Id and Status of Task."
      tags: []
      consumes:
      - application/json
      schemes:
      - http
      - https
      parameters:
      - name: "title"
        in: "body"
        description: "You Need To send ID,Task And Status to Create task"
        required: true
        schema:
          $ref: "#/definitions/taskRequestBody"
      responses:
        "201":
          description: "successful creation"
          schema:
            $ref: "#/definitions/Response201"
        "400":
          description: "Invalid request body"
          schema:
            $ref: "#/definitions/Response400"
        "200":
          description: "Task With Same ID Already Exists"
          schema:
            $ref: "#/definitions/Response200"
    put:
      operationId: "updateTask"
      deprecated: false
      summary: "Updates a Task "
      description: "Updates a Task given the name ,Id and Status of Task."
      tags: []
      consumes:
      - application/json
      schemes:
      - http
      - https
      parameters:
      - name: "title"
        in: "body"
        description: "You Need To send ID,Task And Status to Update task"
        required: true
        schema:
          $ref: "#/definitions/taskRequestUpdateBody"
      responses:
        "404":
          description: "Task With Given ID does not exists"
          schema:
            $ref: "#/definitions/Response404"
        "200":
          description: "Successfully Updated"
          schema:
            $ref: "#/definitions/ResponseUpdate200"
        "400":
          description: "Invalid Data,Bad Request"
          schema:
            $ref: "#/definitions/Response400"
  /task/{Id}:
    get:
      operationId: "getTaskById"
      deprecated: false
      summary: "Get a Task By its ID"
      description: "Get a Task with a particular ID associated with it"
      tags: []
      consumes:
      - application/json
      schemes:
      - http
      - https
      parameters:
      - name: "Id"
        in: "path"
        description: "id of the task to fetch"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Successfully Fetched "
          schema:
            $ref: "#/definitions/ResponseById200"
        "400":
          description: "Invalid requested ID"
          schema:
            $ref: "#/definitions/Response400"
        "404":
          description: "Task with ID not Found"
          schema:
            $ref: "#/definitions/Response404"
    delete:
      operationId: "getDeletekById"
      deprecated: false
      summary: "Delete a Task By its ID"
      description: "Delete a Task with a particular ID associated with it"
      tags: []
      consumes:
      - application/json
      schemes:
      - http
      - https
      parameters:
      - name: "Id"
        in: "path"
        description: "id of the task to fetch"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Successfully Deleted "
          schema:
            $ref: "#/definitions/Delete200"
        "400":
          description: "Invalid requested ID"
          schema:
            $ref: "#/definitions/Response400"
        "404":
          description: "Task with ID Not Found"
          schema:
            $ref: "#/definitions/Response404"
 
definitions:
  Task:
    type: "object"
    properties:
      Id:
        type: "integer"
        format: "int64"
      Task:
        type: "string"
        format: "string"
      Status:
        type: "boolean"
        format: "boolean"
    example: 
      Id: 1
      Task: "Running"
      Status: false
    xml: {}
  Response200:
    type: "object"
    properties:
      Message:  
        type: "string"
        format: "string"
        default: "OK"
      Body:
        $ref: "#/definitions/Task"
     
    xml: {}
  Delete200:
    type: "object"
    properties:
      Message:  
        type: "string"
        format: "string"
        default: "Deleted"
      Body:
        $ref: "#/definitions/Task"
    xml: {}
  ResponseById200:
    type: "object"
    properties:
      Message:  
        type: "string"
        format: "string"
        default: "OK"
      Body:
        $ref: "#/definitions/Task"
    xml: {}
  
  ResponseUpdate200:
    type: "object"
    properties:
      Message:  
        type: "string"
        format: "string"
        default: "OK"
      Body:
        $ref: "#/definitions/taskRequestUpdateBody"
    xml: {}
  Response201:
    type: "object"
    properties:
      Message:  
        type: "string"
        format: "string"
        default: "OK"
      Body:
        $ref: "#/definitions/Task"
    xml: {}
  Response400:
    type: "object"
    properties:
      Message:  
        type: "string"
        format: "string"
      ErrorCode:
        type: "integer"
        format: "int64"
        default: 400
    example:
      Message: "Invalid Data, Bad Request"
      ErrorCode: 400
    xml: {}
  Response404:
    type: "object"
    properties:
      Message:  
        type: "string"
        format: "string"
      ErrorCode:
        type: "integer"
        format: "int64"
        default: 404
    example:
      Message: "Data With ID 2 Not Found"
      ErrorCode: 404
    xml: {}

 
  todosList:
    type: "object"
    properties:
      Message: 
        type: "string"
        format: "string"
      Body:
        type: "array"
        items:
          $ref: "#/definitions/Task"
    xml:
      name: "todosList"
  taskRequestBody:
    type: "object"
    properties:
      Id:
        type: "integer"
        format: "int64"
      Task:
        type: "string"
        format: "string"
      Status:
        type: "boolean"
        format: "boolean"
    example:
      Id: 1
      Task: "Running"
      Status: false
    xml:
      name: "taskRequestBody"
  taskRequestUpdateBody:
    type: "object"
    properties:
      Id:
        type: "integer"
        format: "int64"
      Task:
        type: "string"
        format: "string"
      Status:
        type: "boolean"
        format: "boolean"
    example:
      Id: 1
      Task: "Running"
      Status: true
    xml:
      name: "taskRequestBody"
      
  
